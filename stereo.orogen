name "stereo"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
# import_types_from "denseStereoTypes.hpp"

# If the component/deployments use data types that are defined in other oroGen
# projects, these projects should be imported there as well.
using_library "opencv", :typekit => false
using_library "stereo"
using_library "pcl_common-1.7"
using_library "pcl_visualization-1.7"


import_types_from "base"

import_types_from "stereo/dense_stereo_types.h"
import_types_from "stereo/sparse_stereo_types.h"
import_types_from "frame_helper/Calibration.h"

task_context "Task" do
   needs_configuration

   # A configuration property (here, a std::string). Its value can be retrieved
   # in the C++ code with # _config_value.get() and _config_value.set(new_value).
   property("stereoCameraCalibration", "/frame_helper/StereoCalibration").
	doc "calibration parameters for stereo camera setup"
   property("libElas_conf", "/stereo/libElasConfiguration").
	doc "configuration values for libElas"
   property("gaussian_kernel", "/int", 0).
	doc "gaussian kernel for dense stereo pre-processing."
   property("sparse_config", "/stereo/FeatureConfiguration").
	doc "configuration for sparse features."

   input_port "left_frame", ro_ptr('base::samples::frame::Frame')
   input_port "right_frame", ro_ptr('base::samples::frame::Frame')
   property( "image_rectified", "bool", false ).
	doc( "if set to true, the input images are assumed to already be rectified." )
   property( "image_rotated", "bool", false ).
	doc( "if set to true, the input images are assumed to be rotated by 180 degrees." )
   property( "image_scaling_factor", "double", 1.0).
   	doc( "down- or upscale input images by this factor." )

   output_port("sparse_debug", "/base/samples/frame/Frame").
        doc "debug frame for the sparse processing library."
   output_port("disparity_frame", "/base/samples/frame/Frame").
	doc "disparity image for the left input camera. Mainly for debug purposes."
   output_port("distance_frame", "/base/samples/DistanceImage").
	doc "distance image for the left camera"

   output_port("stereo_features", "/stereo/StereoFeatureArray").
	doc "provides an array of 3d points with associated feature descriptors."

   # Synchronous output 
   output_port('left_frame_sync', ro_ptr('base::samples::frame::Frame')).
        doc 'Synchronized Left camera frame of PanCam.'
   output_port('right_frame_sync', ro_ptr('base::samples::frame::Frame')).
        doc 'Synchronized Right camera frame of PanCam.'

   port_driven
end


# Declares a deployment, i.e. an actual executable that contains various tasks.
deployment "stereo_test" do
    # Declares it
    task("stereo", "Task")

    add_default_logger
end

